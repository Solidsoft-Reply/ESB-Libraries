<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppSettingReadFailed" xml:space="preserve">
    <value>An attempt to read an app setting value for {0} from the configuration file failed.
{1}</value>
  </data>
  <data name="ArgumentExceptionLoggedToApplication" xml:space="preserve">
    <value>Failed to log a message to the {0}.  It was logged to the Application source instead.

The error message when attempting to log was:

{1}</value>
  </data>
  <data name="ConversionToDecimalFailedInvalidFormat" xml:space="preserve">
    <value>Could not convert {0} to a decimal due to invalid format.  The default value {1} will be returned.
{2}</value>
  </data>
  <data name="ConversionToDecimalFailedOverflow" xml:space="preserve">
    <value>Could not convert {0} to a decimal due to an overflow error.  The default value {1} will be returned.
{2}</value>
  </data>
  <data name="EnvironmentInfoTemplate" xml:space="preserve">
    <value>Machine: {0}
Processor count: {1}
User: {2}\{3}
OS version: {4} [{5}]
Process: {6} [{7}] started at {8} and run for {9}
PID: {10}
Thread ID: {11}
Terminal Services session: {12}
.NET RTE version: {13}
Memory: virtual = {14} bytes; working set = {15} bytes
Stack trace:
{16}</value>
  </data>
  <data name="InquiryInitialised" xml:space="preserve">
    <value>Solidsoft Reply ESB UDDI inquiry services have been successfully initialised.  The default UDDI inquiry URL is {0}.</value>
  </data>
  <data name="InquiryStartup" xml:space="preserve">
    <value>Solidsoft Reply ESB UDDI inquiry services are initialising.</value>
  </data>
  <data name="InvalidUddiSitesFoundInAd" xml:space="preserve">
    <value>One or more invalid UDDI directory inquiry sites were returned from Active Directory.

{0}</value>
  </data>
  <data name="InvalidUri" xml:space="preserve">
    <value>The following URI is invalid: {0}</value>
  </data>
  <data name="InvalidUriWillBeReplaced" xml:space="preserve">
    <value>The invalid URI {0} will be replaced by: {1}</value>
  </data>
  <data name="SolidsoftEsbUddiSource" xml:space="preserve">
    <value>Solidsoft Reply ESB UDDI</value>
  </data>
  <data name="Uddi" xml:space="preserve">
    <value>A SOAP fault occurred when invoking a UDDI service.</value>
  </data>
  <data name="UddiConnectionIsNull" xml:space="preserve">
    <value>A null UDDI connection was passed when trying to invoke a UDDI service.</value>
  </data>
  <data name="UddiErrorTemplate" xml:space="preserve">
    <value>{1}{2}
Request Type: {3}
Authentication Type: {4}
Directory Description: {5}
Inquiry URL: {6}
Publish URL: {7}
Extensions URL: {8}
{0}</value>
  </data>
  <data name="UddiInvalid" xml:space="preserve">
    <value>An invalid key value was passed when trying to invoke a UDDI service.</value>
  </data>
  <data name="UddiInvalidSiteError" xml:space="preserve">
    <value>A null site location or Inquiry URL was passed when trying to invoke a UDDI service.</value>
  </data>
  <data name="UddiSiteUnexpectedlyRemovedFromCache" xml:space="preserve">
    <value>A UDDI site directory cache entry has been unexpectedly removed.  The reason given is {0}</value>
  </data>
  <data name="UddiUnexpected" xml:space="preserve">
    <value>An unexpected error occurred when invoking a UDDI service. </value>
  </data>
  <data name="UddiUnknown" xml:space="preserve">
    <value>An unexpected error occurred when invoking a UDDI service.</value>
  </data>
  <data name="UddiUnknownMessageType" xml:space="preserve">
    <value>An unknown message type was passed when trying to invoke a UDDI service.</value>
  </data>
  <data name="ExceptionInvalidProviderKey" xml:space="preserve">
    <value>Provider key is invalid or missing.</value>
  </data>
  <data name="ExceptionInvalidProviderName" xml:space="preserve">
    <value>Provider name is invalid or missing.</value>
  </data>
  <data name="ExceptionInvalidServiceKey" xml:space="preserve">
    <value>Service key is invalid or missing.</value>
  </data>
  <data name="ExceptionInvalidServiceName" xml:space="preserve">
    <value>Service name is invalid or missing.</value>
  </data>
  <data name="ExceptionInvalidBindingKey" xml:space="preserve">
    <value>Binding key is invalid or missing.</value>
  </data>
  <data name="ExcaptionInvalidServiceIdentifier" xml:space="preserve">
    <value>Service identifier is invalid or missing.</value>
  </data>
  <data name="ExceptionInvalidServiceIdentifierValue" xml:space="preserve">
    <value>Service identifier value is invalid or missing.</value>
  </data>
  <data name="ExceptionInvalidProviderIdentifier" xml:space="preserve">
    <value>Provider identifier is invalid or missing.</value>
  </data>
  <data name="ExceptionInvalidServiceProviderIdentifierValue" xml:space="preserve">
    <value>Provider identifier value is invalid or missing.</value>
  </data>
  <data name="ExceptionUDDIDefaultEventLogNotInitialised_" xml:space="preserve">
    <value>The UDDI default event log is not initialised.</value>
  </data>
</root>